---
title: "Análisis de validación de los constructos: Resultados de EFA y CFA"
author: "Tomás Urzúa, Practicante del OCS"
date: today
lang: en
fontsize: 14pt
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 2
    toc-expand: 1
    toc-title: Contenidos
    number-sections: true
    number-depth: 3
    theme:
      - ../ocs.scss
    code-link: true
    title-block-banner: true 
---

# Análisis factorial exploratorio

```{r}
#| label: cargar librerias
#| echo: false

pacman::p_load(corrplot, lavaan, psych, psy, nFactors, 
             GPArotation, devtools, ggrepel, dplyr, sjPlot, semTools)
             
```

Cargamos la base ELSOC 2022, la cual contiene las variables correspondientes a los factores de seguridad y calidad de vida en el vecindario
```{r}
#| label: cargar base

elsoc <- readRDS("../input/data/proc_data/elsoc_2022.RData")
```


## Factor seguridad

Se genera un subset de datos solamente con las variables que conforman el factor de seguridad para que el análisis sea más prolijo

```{r}
elsoc_seg <- elsoc %>%
  select(seguridad_sat, seguridad_perc, peleas_calle, asaltos, trafico_drogas)
```

Las variables se convierten a numéricas

```{r} 
elsoc_seg <- elsoc %>%
  select(seguridad_sat, seguridad_perc, peleas_calle, asaltos, trafico_drogas) %>%
  mutate(across(everything(), as.numeric))
```


```{r}
#| include: false

corrseg <- round(cor(elsoc_seg, use = "pairwise.complete.obs"), 2)
corrseg
```

Se calcula la matriz de correlaciones
```{r}
#| label: fig-corr-seg
#| fig-cap: Correlaciones factor seguridad
#| fig-cap-location: bottom

corrplot(corrseg,
         method = "color",       # colorea los recuadros según valor
         col = colorRampPalette(c("#2761f5", "white", "#f56c27"))(20),  # blanco a rojo
         type = "upper",         # mostrar solo la mitad superior
         order = "original",     # mantener el orden de las variables
         addCoef.col = "black",  # añadir los valores numéricos
         tl.col = "black",       # color etiquetas
         tl.srt = 45, 
         bg = "white",# rotar etiquetas
         number.cex = 0.8
)
```

```{r}
KMO(corrseg) 
cortest.bartlett(corrseg, n = 2730)
```


Ya con la matriz de correlaciones lista, pasamos a realizar el EFA

```{r}
tab_fa(elsoc_seg, rotation = "varimax", show.comm = TRUE)
```

## Factor de calidad de vida en el vecindario

Subset con los indicadores necesarios

```{r}
elsoc_barrio <- elsoc %>%
  select(confianza_vecinos, barrio_ideal, barrio_integracion, barrio_identidad,
         barrio_pertenencia, barrio_amigos, barrio_sociable, barrio_cordial,
         barrio_colaborador, conectividad, areas_verdes, barrio_limpio,
         cercania_actividad, cercania_escuelas, cercania_comercio,
         cercania_familia, tamaño_vivienda, calidad_vivienda)
```

Las variables se convierten a numéricas

```{r}
elsoc_barrio <- elsoc %>%
  select(confianza_vecinos, barrio_ideal, barrio_integracion, barrio_identidad,
         barrio_pertenencia, barrio_amigos, barrio_sociable, barrio_cordial,
         barrio_colaborador, conectividad, areas_verdes, barrio_limpio,
         cercania_actividad, cercania_escuelas, cercania_comercio,
         cercania_familia, tamaño_vivienda, calidad_vivienda) %>%
  mutate(across(everything(), as.numeric))
```


```{r}
#| include: false

corrbarrio <- round(cor(elsoc_barrio, use = "pairwise.complete.obs"), 2)
corrbarrio
```

Se calcula la matriz de correlaciones
```{r}
#| label: fig-corr-barrio
#| fig-cap: Correlaciones factor calidad de vida en el barrio
#| fig-cap-location: bottom

corrplot(corrbarrio,
         method = "color",       # colorea los recuadros según valor
         col = colorRampPalette(c("#2761f5", "white", "#f56c27"))(20),  # blanco a rojo
         type = "upper",         # mostrar solo la mitad superior
         order = "original",     # mantener el orden de las variables
         addCoef.col = "black",  # añadir los valores numéricos
         tl.col = "black",       # color etiquetas
         tl.srt = 45, 
         bg = "white",# rotar etiquetas
         number.cex = 0.8
)
```

```{r}
KMO(corrbarrio) 
cortest.bartlett(corrbarrio, n = 2730)
```

```{r}
tab_fa(elsoc_barrio, rotation = "varimax", show.comm = TRUE)
```

## Factor redes sociales (ola 5)

```{r}
#| label: cargar base redes
#| echo: false

elsoc_redes <- readRDS("../input/data/proc_data/elsoc_2021.RData")
```

Seleccionamos las variables a utilizar 

```{r}
elsoc_redes <- elsoc_redes %>%
select(confianza_gen, altruismo_gen, visitar_vecino,
       reunion_pub, visita_amigos, voluntariado, donar_dinero, prestar_dinero, 
       ayuda_trabajo)
```

Pasamos las variables a numéricas 

```{r}
elsoc_redes <- elsoc_redes %>%
  select(confianza_gen, altruismo_gen, visitar_vecino,
       reunion_pub, visita_amigos, voluntariado, donar_dinero, prestar_dinero, 
       ayuda_trabajo) %>%
  mutate(across(everything(), as.numeric))
```

```{r}
hist(elsoc_redes$confianza_gen,main="Histograma del Vector",xlab="Valor",ylab="Frecuencia",col="cyan4",border="black")
```

```{r}
elsoc_redes$confianza_gen <- car::recode(elsoc_redes$confianza_gen, "c(1, 3)= 0; (2)=1")
```

```{r}
#| include: false 

corredes <- round(cor(elsoc_redes, use = "pairwise.complete.obs"), 2)
corredes
```

Estimamos la matriz de correlaciones

```{r}
#| label: fig-corr-redes
#| fig-cap: Correlaciones factor redes sociales
#| fig-cap-location: bottom

corrplot(corredes,
         method = "color",       # colorea los recuadros según valor
         col = colorRampPalette(c("#2761f5", "white", "#f56c27"))(20),  
         type = "upper",         # mostrar solo la mitad superior
         order = "original",     # mantener el orden de las variables
         addCoef.col = "black",  # añadir los valores numéricos
         tl.col = "black",       # color etiquetas
         tl.srt = 45, 
         bg = "white",# rotar etiquetas
         number.cex = 0.8
)
```

```{r}
KMO(corredes) 
cortest.bartlett(corredes, n = 2740)
```

```{r}
tab_fa(elsoc_redes, rotation = "varimax", show.comm = TRUE)
```


# Análisis factorial confirmatorio

## Factor seguridad

Especificamos el modelo tomando en cuenta la propuesta teórica del documento. 
```{r}
seguridad_model <- '
subjetiva =~ seguridad_perc + seguridad_sat
objetiva =~ peleas_calle + asaltos + trafico_drogas
'
```

Se estima el modelo
```{r}
seguridad_cfa <- cfa(model = seguridad_model,
                     data = elsoc_seg,
                     estimator = "DWLS",
                     ordered = TRUE,
                     std.lv = FALSE)
```

Visualizamos los resultados
```{r}
summary(seguridad_cfa, standardized = TRUE, fit.measures = TRUE)
```

Cargas factoriales estandarizadas
```{r}
standardizedSolution(seguridad_cfa) %>% 
  dplyr::filter(op == "=~") %>% 
  dplyr::select(lhs, rhs, est.std)
```
En este modelo todas las cargas factoriales estandarizadas son altas, donde los cinco indicadores oscilan entre el 0.7 y 0.8. Todos los indicadores son explicados en buena medida por su factor latente respectivo. 


## Factor vinculación territorial

Después de haber visto los EFA, sumado a la idea de realizar una propuesta minimalista de cohesión social, es que se propone modificar la subdimensión de "calidad de vida en el vecindario" y llamarla "vinculación territorial", la cual estaría compuesta por un factor de sentido de pertenencia territorial y otro de satisfacción con el barrio.
```{r}
barrio_model <- '
pertenencia =~ barrio_ideal + barrio_integracion + barrio_identidad + barrio_pertenencia
satisfaccion =~ barrio_amigos + barrio_sociable + barrio_cordial + barrio_colaborador
'
```

Estimación del modelo
```{r}
barrio_cfa <- cfa(model = barrio_model,
                     data = elsoc_barrio,
                     estimator = "DWLS",
                     ordered = TRUE,
                     std.lv = FALSE)
```


```{r}
summary(barrio_cfa, standardized = TRUE, fit.measures = TRUE)
```

Cargas factoriales estandarizadas
```{r}
standardizedSolution(barrio_cfa) %>% 
  dplyr::filter(op == "=~") %>% 
  dplyr::select(lhs, rhs, est.std)
```
Todas las cargas factoriales son altas, rondando entre en 0.7 y 0.8, por lo que ambos factores estarían explicando consistentemente sus indicadores correspondientes. 

## Factor redes sociales
A partir del EFA y la idea de minimalizar la propuesta, se decide plantear un modelo con tres factores: confianza interpersonal, comportamiento prosocial y apoyo económico. Se reduce la cantidad de indicadores de 10 a 6, dos pertenecientes a cada factor.
```{r}
redes_model_conf <- '
confianza_inter =~ confianza_gen + altruismo_gen
prosocial =~ reunion_pub + voluntariado
economica =~ prestar_dinero + ayuda_trabajo
'
```

```{r}
redes_conf_cfa <- cfa(model = redes_model_conf,
                     data = elsoc_redes,
                     estimator = "WLSMV",
                     ordered = TRUE,
                     std.lv = FALSE)
```

```{r}
summary(redes_conf_cfa, standardized = TRUE, fit.measures = TRUE)
```

En confianza interpersonal, el indicador de confianza generalizada posee una carga factorial muy alta (.99) en comparación de altruismo generalizado (.35), por lo que se interpreta que confianza generalizada podría ser un factor por sí solo, prescindiendo del otro indicador. Esto, en consecuencia, significa que el factor de confianza interpersonal, de la manera que está construido actualmente, no es fiable en su medición. 

Por ello, probamos otro modelo excluyendo el factor de confianza interpersonal y manteniendo los factores de comportamiento prosocial y apoyo económico. 
```{r}
redes_model <- '
prosocial =~ reunion_pub + voluntariado
economica =~ prestar_dinero + ayuda_trabajo
'
```
```{r}
redes_cfa <- cfa(model = redes_model,
                     data = elsoc_redes,
                     estimator = "WLSMV",
                     ordered = TRUE,
                     std.lv = FALSE)
```

```{r}
summary(redes_cfa, standardized = TRUE, fit.measures = TRUE)
```

Cargas factoriales estandarizadas
```{r}
standardizedSolution(redes_cfa) %>% 
  dplyr::filter(op == "=~") %>% 
  dplyr::select(lhs, rhs, est.std)
```
